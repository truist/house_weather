% layout 'chart';
% title 'House Weather';

<script type="text/javascript">
  google.charts.load('current', {packages: ['corechart']});
  google.charts.setOnLoadCallback(chartsReady);

  function chartsReady() {
    var params = '';
    % if ($start) {
      params = '?start=<%= $start %>';
    % } else {
      console.log('no $start param');
    % }
    fetch('/query' + params, { cache: 'no-store' })
      .then(response => response.json())
      .then(data => drawCharts(data))
      .catch(error => console.error(error));
  }

  function drawCharts(data) {
    var tempData = new google.visualization.DataTable();
    tempData.addColumn('datetime', 'Date');

    var humidityData = new google.visualization.DataTable();
    humidityData.addColumn('datetime', 'Date');

    var dewpointData = new google.visualization.DataTable();
    dewpointData.addColumn('datetime', 'Date');

    var co2Data = new google.visualization.DataTable();
    co2Data.addColumn('datetime', 'Date');

    var vocData = new google.visualization.DataTable();
    vocData.addColumn('datetime', 'Date');

    var pm25Data = new google.visualization.DataTable();
    pm25Data.addColumn('datetime', 'Date');

    var waterData = new google.visualization.DataTable();
    waterData.addColumn('datetime', 'Date');

    var wattsData = new google.visualization.DataTable();
    wattsData.addColumn('datetime', 'Date');

    var voltsData = new google.visualization.DataTable();
    voltsData.addColumn('datetime', 'Date');

    populateData(data, tempData, humidityData, dewpointData, co2Data, vocData, pm25Data, waterData, wattsData, voltsData);

    drawChart('Temperature', 'temp_chart', tempData);
    drawChart('Dew Point', 'dewpoint_chart', dewpointData);
    drawChart('Humidity', 'humidity_chart', humidityData);
    drawChart('CO2', 'co2_chart', co2Data);
    drawChart('VOC', 'voc_chart', vocData);
    drawChart('PM2.5', 'pm25_chart', pm25Data);
    drawChart('Water Volume', 'water_volume_chart', waterData);
    drawChart('Watts', 'watts_chart', wattsData);
    drawChart('Volts', 'volts_chart', voltsData);
  }

  function populateData(data, tempData, humidityData, dewpointData, co2Data, vocData, pm25Data, waterData, wattsData, voltsData) {
    // console.log(data);
    var columnCount = 0;
    var sourceColumns = {};
    findSources(data).forEach(source => {
      tempData.addColumn('number', source);
      humidityData.addColumn('number', source);
      dewpointData.addColumn('number', source);
      co2Data.addColumn('number', source);
      vocData.addColumn('number', source);
      pm25Data.addColumn('number', source);
      waterData.addColumn('number', source);
      wattsData.addColumn('number', source);
      voltsData.addColumn('number', source);

      sourceColumns[source] = ++columnCount;
    });

    data.forEach(record => {
      var tempRow = [];
      var humidityRow = [];
      var dewpointRow = [];
      var co2Row = [];
      var vocRow = [];
      var pm25Row = [];
      var waterRow = [];
      var wattsRow = [];
      var voltsRow = [];
      for (var i = 0; i < tempData.getNumberOfColumns(); i++) {
        if (i == 0) {
          var date = new Date(record.datetime);
          tempRow.push(date);
          humidityRow.push(date);
          dewpointRow.push(date);
		  co2Row.push(date);
		  vocRow.push(date);
		  pm25Row.push(date);
		  waterRow.push(date);
		  wattsRow.push(date);
		  voltsRow.push(date);
        } else if (i == sourceColumns[record.source]) {
          tempRow.push(record.temp);
          humidityRow.push(record.humidity);
          dewpointRow.push(calcDewpoint(record.temp, record.humidity));
		  co2Row.push(record.co2);
		  vocRow.push(record.voc);
		  pm25Row.push(record.pm25);
		  waterRow.push(record.h2o_vol);
		  wattsRow.push(record.watts);
		  voltsRow.push(record.volts);
        } else {
          tempRow.push(null);
          humidityRow.push(null);
          dewpointRow.push(null);
          co2Row.push(null);
          vocRow.push(null);
          pm25Row.push(null);
          waterRow.push(null);
          wattsRow.push(null);
          voltsRow.push(null);
        }
      }
      tempData.addRow(tempRow);
      humidityData.addRow(humidityRow);
      dewpointData.addRow(dewpointRow);
      co2Data.addRow(co2Row);
      vocData.addRow(vocRow);
      pm25Data.addRow(pm25Row);
      waterData.addRow(waterRow);
      wattsData.addRow(wattsRow);
      voltsData.addRow(voltsRow);
    });

	for (var columnIndex = tempData.getNumberOfColumns() - 1; columnIndex >= 0; columnIndex--) {
		removeColumnIfEmpty(tempData, columnIndex)
		removeColumnIfEmpty(humidityData, columnIndex)
		removeColumnIfEmpty(dewpointData, columnIndex)
		removeColumnIfEmpty(co2Data, columnIndex)
		removeColumnIfEmpty(vocData, columnIndex)
		removeColumnIfEmpty(pm25Data, columnIndex)
		removeColumnIfEmpty(waterData, columnIndex)
		removeColumnIfEmpty(wattsData, columnIndex)
		removeColumnIfEmpty(voltsData, columnIndex)
	}
  }

  function removeColumnIfEmpty(chartData, columnIndex) {
	  var range = chartData.getColumnRange(columnIndex);
	  if (range.min == null && range.max == null) {
		  chartData.removeColumn(columnIndex);
	  }
  }

  function findSources(data) {
    var sourcesList = [];
    var sourcesHash = {};

    data.forEach(record => {
      if (!sourcesHash[record.source]) {
        sourcesHash[record.source] = record.source;
        sourcesList.push(record.source);
      }
    });

    return sourcesList.sort();
  }

  function drawChart(title, elementID, data) {
    var columns = [];
    var series = {};
    for (var i = 0; i < data.getNumberOfColumns(); i++) {
      columns.push(i);
      if (i > 0) {
        series[i - 1] = {};
      }
    }

    var options = {
      title: title,
      interpolateNulls: true,
      legend: {
        position: 'top',
        alignment: 'center',
      },
      height: 350,
      series: series,
    };

    var chart = new google.visualization.LineChart(document.getElementById(elementID));
    chart.draw(data, options);

    google.visualization.events.addListener(chart, 'select', function () {
      deSelectable(chart, data, columns, series, options);
    });
  };

  // based on http://jsfiddle.net/xDUPF/53/
  function deSelectable(chart, data, columns, series, options) {
    var sel = chart.getSelection();
    if (sel.length > 0) {
      if (sel[0].row === null) {  // clicked on the legend

        var col = sel[0].column;
        if (columns[col] == col) {  // hide
          columns[col] = {
            label: data.getColumnLabel(col),
            type: data.getColumnType(col),
            calc: function () {
              return null;
            }
          };
          series[col - 1].color = '#CCCCCC';

        } else {  // show
          columns[col] = col;
          series[col - 1].color = null;
        }

        var view = new google.visualization.DataView(data);
        view.setColumns(columns);
        chart.draw(view, options);
      }
    }
  }

  // derived from explanation at https://www.omnicalculator.com/physics/dew-point
  function calcDewpoint(temp, humidity) {
	if (!humidity) {
		return null;
	}
    var a = 17.62;
    var b = 243.12;
    var alpha = Math.log(humidity / 100) + a * temp / (b + temp);
    return (b * alpha) / (a - alpha);
  }

</script>

<div id="last_picker">
  <ul>
    <li>Show only the last:</li>
    <li id="all_menu"><%= link_to 'All' => url_for()->query(last => "1000years") %></li>
    <li id="years1_menu"><%= link_to '1 year' => url_for()->query(last => "1year") %></li>
    <li id="months1_menu"><%= link_to '1 month' => url_for()->query(last => "1month") %></li>
    <li id="weeks1_menu"><%= link_to '1 week' => url_for()->query(last => "1week") %></li>
    <li id="days2_menu"><%= link_to '48 hours' => url_for()->query(last => "2days") %></li>
    <li id="days1_menu"><%= link_to '24 hours' => url_for()->query(last => "1day") %></li>
    <li id="hours12_menu"><%= link_to '12 hours' => url_for()->query(last => "12hours") %></li>
    <li id="hours2_menu"><%= link_to '2 hours' => url_for()->query(last => "2hours") %></li>
  </ul>
</div>
<div id="temp_chart"></div>
<div id="dewpoint_chart"></div>
<div id="humidity_chart"></div>
<div id="co2_chart"></div>
<div id="voc_chart"></div>
<div id="pm25_chart"></div>
<div id="water_volume_chart"></div>
<div id="watts_chart"></div>
<div id="volts_chart"></div>

